import tkinter as tk
from tkinter import messagebox
import mysql.connector
import random

class Personagem:
    def __init__(self, nome, classe, nivel, pontos_vida, power):
        self.nome = nome
        self.classe = classe
        self.nivel = nivel
        self.pontos_vida = pontos_vida
        self.power = power

    def salvar_no_banco(self, usuario_id, conexao, cursor):
        cursor.execute("""
        INSERT INTO personagens (usuario_id, nome, classe, nivel, pontos_vida, power)
        VALUES (%s, %s, %s, %s, %s, %s)
        """, (usuario_id, self.nome, self.classe, self.nivel, self.pontos_vida, self.power))
        conexao.commit()

class Inimigo:
    def __init__(self, nome, nivel, pontos_vida, power):
        self.nome = nome
        self.nivel = nivel
        self.pontos_vida = pontos_vida
        self.power = power

    def atacar(self):
        return random.randint(1, 100)

class Usuario:
    def __init__(self, nome, senha):
        self.nome = nome
        self.senha = senha
        self.id = None 

    def conectar_banco(self):
        conexao = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="jogo_rpg"
        )
        return conexao, conexao.cursor()

    def desconectar_banco(self, conexao, cursor):
        cursor.close()
        conexao.close()

    def usuario_existente(self):
        conexao, cursor = self.conectar_banco()
        cursor.execute("""
        SELECT id FROM usuarios WHERE nome = %s
        """, (self.nome,))
        resultado = cursor.fetchone()
        self.desconectar_banco(conexao, cursor)
        return resultado is not None

    def cadastrar_no_banco(self):
        if self.usuario_existente():
            messagebox.showerror("Erro", "Nome de usuário já existe.")
            return

        conexao, cursor = self.conectar_banco()
        cursor.execute("""
        INSERT INTO usuarios (nome, senha)
        VALUES (%s, %s)
        """, (self.nome, self.senha))
        conexao.commit()
        self.desconectar_banco(conexao, cursor)

    def autenticar(self):
        conexao, cursor = self.conectar_banco()
        cursor.execute("""
        SELECT id FROM usuarios WHERE nome = %s AND senha = %s
        """, (self.nome, self.senha))
        resultado = cursor.fetchone()
        self.desconectar_banco(conexao, cursor)

        if resultado:
            self.id = resultado[0]
            return True
        else:
            return False

    def carregar_personagens(self):
        conexao, cursor = self.conectar_banco()

        cursor.execute("""
        SELECT * FROM personagens WHERE usuario_id = %s
        """, (self.id,))
        personagens = cursor.fetchall()

        self.desconectar_banco(conexao, cursor)
        return [Personagem(*personagem) for personagem in personagens]

class JogoRPG:
    def __init__(self):
        self.conexao, self.cursor = self.conectar_banco()
        self.criar_tabelas()

        self.janela = tk.Tk()
        self.janela.title('Batalha dos Heróis')

        self.botao_entrar = tk.Button(text='Acessar sua Conta', command=self.pagina_login)
        self.botao_entrar.grid(column=2, row=2)
        self.botao_criar = tk.Button(text='Criar Conta', command=self.pagina_cadastro)
        self.botao_criar.grid(column=2, row=3)

        self.janela.mainloop()

    def conectar_banco(self):
        conexao = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="jogo_rpg"
        )
        return conexao, conexao.cursor()

    def desconectar_banco(self, conexao, cursor):
        cursor.close()
        conexao.close()

    def criar_tabelas(self):
        self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS usuarios (
            id INT AUTO_INCREMENT PRIMARY KEY,
            nome VARCHAR(255) UNIQUE,
            senha VARCHAR(255)
        )
        """)
        self.conexao.commit()

        self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS personagens (
            id INT AUTO_INCREMENT PRIMARY KEY,
            usuario_id INT,
            nome VARCHAR(255),
            classe VARCHAR(50),
            nivel INT,
            pontos_vida INT,
            power INT,
            FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
        )
        """)
        self.conexao.commit()

        self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS inimigos (
            id INT AUTO_INCREMENT PRIMARY KEY,
            nome VARCHAR(255),
            nivel INT,
            pontos_vida INT,
            power INT
        )
        """)
        self.conexao.commit()

    def pagina_login(self):
        self.limpar_tela()

        label_login = tk.Label(text='Login:')
        label_login.grid(row=0, column=0)

        label_senha = tk.Label(text='Password:')
        label_senha.grid(row=1, column=0)

        entry_login = tk.Entry()
        entry_login.grid(row=0, column=1)

        entry_senha = tk.Entry(show="*")
        entry_senha.grid(row=1, column=1)

        botao_entrar = tk.Button(text='Entrar', command=lambda: self.verificar_login(entry_login.get(), entry_senha.get()))
        botao_entrar.grid(row=2, column=0, columnspan=2)

    def pagina_cadastro(self):
        self.limpar_tela()

        label_login = tk.Label(text='Login:')
        label_login.grid(row=0, column=0)

        label_senha = tk.Label(text='Password:')
        label_senha.grid(row=1, column=0)

        label_confirmar_senha = tk.Label(text='Confirmar Password:')
        label_confirmar_senha.grid(row=2, column=0)

        entry_login = tk.Entry()
        entry_login.grid(row=0, column=1)

        entry_senha = tk.Entry(show="*")
        entry_senha.grid(row=1, column=1)

        entry_confirmar_senha = tk.Entry(show="*")
        entry_confirmar_senha.grid(row=2, column=1)

        botao_criar_conta = tk.Button(text='Criar Conta', command=lambda: self.criar_conta(entry_login.get(), entry_senha.get(), entry_confirmar_senha.get()))
        botao_criar_conta.grid(row=3, column=0, columnspan=2)

    def criar_personagem(self):
        self.limpar_tela()

        label_nome_personagem = tk.Label(text='Nome do Personagem:')
        label_nome_personagem.grid(row=0, column=0)

        entry_nome_personagem = tk.Entry()
        entry_nome_personagem.grid(row=0, column=1)

        classes = ['Blade Knight', 'Elfa', 'Magic Gladiador']
        escolha_classe = tk.StringVar(self.janela)
        escolha_classe.set(classes[0]) 

        dropdown_classe = tk.OptionMenu(self.janela, escolha_classe, *classes)
        dropdown_classe.grid(row=1, column=1)

        botao_criar_personagem = tk.Button(text='Criar Personagem', command=lambda: self.salvar_personagem(entry_nome_personagem.get(), escolha_classe.get()))
        botao_criar_personagem.grid(row=2, column=0, columnspan=2)

    def exibir_personagens(self, personagens):
        label_personagens = tk.Label(text=f'Personagens de {self.usuario_atual.nome}:')
        label_personagens.grid(row=0, column=0, columnspan=2)

        for i, personagem in enumerate(personagens):
            label_personagem = tk.Label(text=f'{i + 1}. {personagem.nome} - Nível {personagem.nivel} - Classe: {personagem.classe}')
            label_personagem.grid(row=i + 1, column=0, columnspan=2)

    def salvar_personagem(self, nome, classe):
        if not nome or not classe:
            messagebox.showerror("Erro", "Preencha todos os campos.")
            return

        nivel_inicial = 1
        pontos_vida_inicial = 10
        power_inicial = 20

        personagem = Personagem(nome, classe, nivel_inicial, pontos_vida_inicial, power_inicial)
        personagem.salvar_no_banco(self.usuario_atual.id, self.conexao, self.cursor)

        messagebox.showinfo("Sucesso", "Personagem criado com sucesso!")
        self.pagina_jogo()

    def limpar_tela(self):
        for widget in self.janela.winfo_children():
            widget.destroy()

    def verificar_login(self, nome, senha):
        self.limpar_tela()

        self.usuario_atual = Usuario(nome, senha)

        label_personagens = tk.Label(text=f'Personagens de {self.usuario_atual.nome}:')
        label_personagens.grid(row=0, column=0, columnspan=2)

        if not self.usuario_atual.autenticar():
            messagebox.showerror("Erro", "Login ou senha incorretos.")
            return

        personagens = self.usuario_atual.carregar_personagens()
        if not personagens:
            self.criar_personagem()
        else:
            self.exibir_personagens(personagens)

    def criar_conta(self, nome, senha, confirmar_senha):
        if senha != confirmar_senha:
            messagebox.showerror("Erro", "Senhas não coincidem.")
            return

        novo_usuario = Usuario(nome, senha)
        novo_usuario.cadastrar_no_banco()

        messagebox.showinfo("Sucesso", "Conta criada com sucesso!")
        self.pagina_jogo()

    def pagina_jogo(self):
        self.limpar_tela()
      


jogo = JogoRPG()
